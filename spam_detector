import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
import warnings

# Suppress warnings
warnings.filterwarnings("ignore")

# Load the dataset
data = pd.read_csv(r"D:\bhavya\spamdetection.csv")

# Check class distribution
print("Class distribution:\n", data['label'].value_counts())

# Preprocess the data
X = data['message']
y = data['label']
# Split the dataset into training and testing sets with stratification
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Convert text data into numerical data using CountVectorizer
vectorizer = CountVectorizer()
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)

# Train the Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train_vectorized, y_train)

# Make predictions
y_pred = model.predict(X_test_vectorized)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print('Classification Report:')
print(classification_report(y_test, y_pred, zero_division=0))  # Set zero_division to 0 or 1
# Test the model with new messages
new_messages = [
    "Congratulations! You've won a free ticket!",
    "Can we reschedule our meeting?",
    "Claim your prize now!",
    "Looking forward to our dinner."
]

# Vectorize the new messages
new_messages_vectorized = vectorizer.transform(new_messages)

# Predict the labels for new messages
predictions = model.predict(new_messages_vectorized)

# Print the predictions
for message, prediction in zip(new_messages, predictions):
    print(f'Message: "{message}" - Prediction:Â {prediction}')
